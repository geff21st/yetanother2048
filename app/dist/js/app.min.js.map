{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["function Helper() { }\n\nHelper.__log = function() {\n    console.log(arguments);\n};\n\nHelper.nearestPow2 = function(num) {\n    return Math.pow(\n        2,\n        Math.round(\n            Math.log( num ) /\n            Math.log( 2 )\n        )\n    );\n};\n\n\n\n\n//class Field\nfunction Field(size, min_val) {\n    this.CELLS_CNT = Math.floor(size) || 4;\n\n    this.CELL_CLS = 'cell';\n    this.CELL_SEL = '.' + this.CELL_CLS;\n    this.CELL_ITEM_SEL = '.' + this.CELL_CLS + '-wrap';\n\n    this.BOX_CLS = 'box';\n    this.BOX_SEL = '.' + this.BOX_CLS;\n\n    this.BTN_SEL = '.btn';\n    this.LEFT_BTN_SEL = this.BTN_SEL + '_move-left';\n    this.UP_BTN_SEL = this.BTN_SEL + '_move-up';\n\n    this.ATTR_COUNTER = 'data-counter';\n    this.MIN_VAL = Math.floor(min_val)|| 2;\n\n    this.cells = [];\n\n    this.init();\n    this.setCallbacks();\n}\n\n\nField.prototype.init = function() {\n    var $_tpl_cell = $(this.CELL_ITEM_SEL + ':first');\n    var $box = $(this.BOX_SEL);\n    $box.html('');\n\n    for(var i = 0; i < this.CELLS_CNT; i++) {\n        this.cells[i] = [];\n        for(var j = 0; j < this.CELLS_CNT; j++) {\n            var $cell = $_tpl_cell.clone();\n            $cell.appendTo($box)\n            this.cells[i][j] = {\n                value: 0,\n                el: $cell,\n                cell: $cell.find(this.CELL_SEL)\n            };\n        }\n    }\n\n    this.value(0, 0, this.MIN_VAL);\n    this.addInRandCell();\n    this.setValues();\n};\n\n\nField.prototype.setValues = function() {\n    var _this = this;\n    this.goThroughTable(function (i, j) {\n        _this.cells[i][j]\n            .cell\n            .attr(\n                _this.ATTR_COUNTER,\n                _this.value(i, j)\n            );\n    });\n};\n\n\nField.prototype.goThroughTable = function(callBack) {\n    if(!$.isFunction(callBack)) return;\n    for(var i = 0; i < this.cells.length; i++) {\n        for(var j = 0; j < this.cells[i].length; j++) {\n            callBack(i, j);\n        }\n    }\n};\n\n\nField.prototype.row = function(i) {\n    return this.cells[i];\n};\n\n\nField.prototype.value = function(i, j, value) {\n    if(arguments.length > 2) {\n        this.cells[i][j].value = Helper.nearestPow2(value);\n    } else if(this.cells[i] == null || this.cells[i][j] == null) {\n        return false;\n    } else {\n        return this.cells[i][j].value;\n    }\n};\n\n\nField.prototype.addInRandCell = function(value) {\n    var i = Math.floor(Math.random() * this.CELLS_CNT);\n    var j = Math.floor(Math.random() * this.CELLS_CNT);\n\n    Helper.__log(i, j);\n\n    // this.value(3, 3, 2);\n    // return;\n\n    if (this.value(i, j)) {\n        return this.addInRandCell();\n    } else {\n        value = value || this.MIN_VAL;\n        this.value(i, j, Helper.nearestPow2(value));\n    }\n};\n\n\nField.prototype.countOneIteration = function(i, j, index, prevVal, chainLen, newRow) {\n    var val = this.value(i, j);\n\n    console.log(\n        'val:' + val, '   ',\n        'prevVal:' + prevVal, '   ',\n        'chainLen:' + chainLen, '   ',\n        'newRow:' + newRow.join(';')\n    );\n\n    if(false !== prevVal) {\n        if((val && val !== prevVal) || index === this.CELLS_CNT) {\n            newRow.push(prevVal * chainLen);\n            chainLen = 0;\n        }\n    }\n\n    if(val) {\n        prevVal = val;\n        chainLen++;\n    }\n\n    return [prevVal, chainLen, newRow];\n};\n\n\nField.prototype.countRowHorizontal = function(i) {\n\n    var info = false;\n    var prevVal = false;\n    var chainLen = 0;\n    var newRow = [];\n\n    for (var j = 0; j <= this.CELLS_CNT; j++) {\n\n        info = this.countOneIteration(i, j, j, prevVal, chainLen, newRow);\n        prevVal = info[0];\n        chainLen = info[1];\n        newRow = info[2];\n\n    }\n\n    return newRow;\n};\n\n\nField.prototype.countRowVertical = function(j) {\n\n    var info = false;\n    var prevVal = false;\n    var chainLen = 0;\n    var newRow = [];\n\n    for (var i = 0; i <= this.CELLS_CNT; i++) {\n\n        info = this.countOneIteration(i, j, i, prevVal, chainLen, newRow);\n        prevVal = info[0];\n        chainLen = info[1];\n        newRow = info[2];\n\n    }\n\n    return newRow;\n};\n\n\nField.prototype.moveLeft = function() {\n    var newRow, val;\n    for (var i = 0; i < this.CELLS_CNT; i++) {\n        newRow = this.countRowHorizontal(i);\n        for (var j = 0; j < this.CELLS_CNT; j++) {\n            val = newRow[j] == null ? false : newRow[j];\n            this.value(i, j, val);\n        }\n    }\n    this.addInRandCell();\n    this.setValues();\n};\n\n\nField.prototype.moveUp = function() {\n    var newRow, val;\n    for (var j = 0; j < this.CELLS_CNT; j++) {\n        newRow = this.countRowVertical(j)\n        for (var i = 0; i < this.CELLS_CNT; i++) {\n            val = newRow[i] == null ? false : newRow[i];\n            this.value(i, j, val);\n        }\n    }\n    this.addInRandCell();\n    this.setValues();\n};\n\n\nField.prototype.setCallbacks = function() {\n    var _this = this;\n    var CLICK_PRFX = 'click.2048_';\n    var CLICK_UP = CLICK_PRFX + '_up';\n    var CLICK_RIGHT = CLICK_PRFX + '_right';\n    var CLICK_DOWN = CLICK_PRFX + '_down';\n    var CLICK_LEFT = CLICK_PRFX + '_left';\n\n    $(document)\n        .off(CLICK_LEFT).on(CLICK_LEFT, this.LEFT_BTN_SEL, function(e) {\n            e.preventDefault();\n            _this.moveLeft();\n        })\n\n        .off(CLICK_UP).on(CLICK_UP, this.UP_BTN_SEL, function(e) {\n            e.preventDefault();\n            _this.moveUp();\n        })\n        ;\n};\n\n\n\n$(function(){\n\n    window.__field = new Field;\n\n\n\n    window.__field.value(0, 1, 2);\n    window.__field.value(0, 2, 2);\n    window.__field.value(0, 3, 2);\n\n\n    window.__field.value(1, 0, 4);\n    window.__field.value(1, 1, 4);\n    window.__field.value(1, 2, 8);\n    window.__field.value(1, 3, 8);\n\n    window.__field.value(2, 0, 8);\n    window.__field.value(2, 1, 4);\n    // window.__field.value(1, 2, 8);\n    window.__field.value(2, 3, 4);\n\n    window.__field.value(3, 1, 4);\n\n\n    window.__field.setValues();\n\n    console.log(__field.cells)\n\n});"],"file":"app.min.js"}